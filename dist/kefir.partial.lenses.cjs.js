'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var L = require('partial.lenses');
var kefir_combines = require('kefir.combines');

// THIS FILE IS GENERATED

var Constant = /*#__PURE__*/kefir_combines.liftFOF(L.Constant);
var Identity = /*#__PURE__*/kefir_combines.liftFOF(L.Identity);
var add = /*#__PURE__*/kefir_combines.liftFOF(L.add);
var all = /*#__PURE__*/kefir_combines.liftFOF(L.all);
var and = /*#__PURE__*/kefir_combines.liftFOF(L.and);
var any = /*#__PURE__*/kefir_combines.liftFOF(L.any);
var append = /*#__PURE__*/kefir_combines.liftFOF(L.append);
var array = /*#__PURE__*/kefir_combines.liftFOF(L.array);
var assign = /*#__PURE__*/kefir_combines.liftFOF(L.assign);
var assignOp = /*#__PURE__*/kefir_combines.liftFOF(L.assignOp);
var branch = /*#__PURE__*/kefir_combines.liftFOF(L.branch);
var branchOr = /*#__PURE__*/kefir_combines.liftFOF(L.branchOr);
var branches = /*#__PURE__*/kefir_combines.liftFOF(L.branches);
var chain = /*#__PURE__*/kefir_combines.liftFOF(L.chain);
var children = /*#__PURE__*/kefir_combines.liftFOF(L.children);
var choice = /*#__PURE__*/kefir_combines.liftFOF(L.choice);
var choices = /*#__PURE__*/kefir_combines.liftFOF(L.choices);
var choose = /*#__PURE__*/kefir_combines.liftFOF(L.choose);
var collect = /*#__PURE__*/kefir_combines.liftFOF(L.collect);
var collectAs = /*#__PURE__*/kefir_combines.liftFOF(L.collectAs);
var complement = /*#__PURE__*/kefir_combines.liftFOF(L.complement);
var compose = /*#__PURE__*/kefir_combines.liftFOF(L.compose);
var concat = /*#__PURE__*/kefir_combines.liftFOF(L.concat);
var concatAs = /*#__PURE__*/kefir_combines.liftFOF(L.concatAs);
var cond = /*#__PURE__*/kefir_combines.liftFOF(L.cond);
var condOf = /*#__PURE__*/kefir_combines.liftFOF(L.condOf);
var count = /*#__PURE__*/kefir_combines.liftFOF(L.count);
var countIf = /*#__PURE__*/kefir_combines.liftFOF(L.countIf);
var counts = /*#__PURE__*/kefir_combines.liftFOF(L.counts);
var countsAs = /*#__PURE__*/kefir_combines.liftFOF(L.countsAs);
var defaults = /*#__PURE__*/kefir_combines.liftFOF(L.defaults);
var define = /*#__PURE__*/kefir_combines.liftFOF(L.define);
var divide = /*#__PURE__*/kefir_combines.liftFOF(L.divide);
var dropPrefix = /*#__PURE__*/kefir_combines.liftFOF(L.dropPrefix);
var dropSuffix = /*#__PURE__*/kefir_combines.liftFOF(L.dropSuffix);
var elems = /*#__PURE__*/kefir_combines.liftFOF(L.elems);
var entries = /*#__PURE__*/kefir_combines.liftFOF(L.entries);
var filter = /*#__PURE__*/kefir_combines.liftFOF(L.filter);
var find = /*#__PURE__*/kefir_combines.liftFOF(L.find);
var findWith = /*#__PURE__*/kefir_combines.liftFOF(L.findWith);
var first = /*#__PURE__*/kefir_combines.liftFOF(L.first);
var flat = /*#__PURE__*/kefir_combines.liftFOF(L.flat);
var flatten = /*#__PURE__*/kefir_combines.liftFOF(L.flatten);
var foldTraversalLens = /*#__PURE__*/kefir_combines.liftFOF(L.foldTraversalLens);
var foldl = /*#__PURE__*/kefir_combines.liftFOF(L.foldl);
var foldr = /*#__PURE__*/kefir_combines.liftFOF(L.foldr);
var forEach = /*#__PURE__*/kefir_combines.liftFOF(L.forEach);
var forEachWith = /*#__PURE__*/kefir_combines.liftFOF(L.forEachWith);
var get = /*#__PURE__*/kefir_combines.liftFOF(L.get);
var getInverse = /*#__PURE__*/kefir_combines.liftFOF(L.getInverse);
var identity = /*#__PURE__*/kefir_combines.liftFOF(L.identity);
var ifElse = /*#__PURE__*/kefir_combines.liftFOF(L.ifElse);
var iftes = /*#__PURE__*/kefir_combines.liftFOF(L.iftes);
var index = /*#__PURE__*/kefir_combines.liftFOF(L.index);
var indexed = /*#__PURE__*/kefir_combines.liftFOF(L.indexed);
var inverse = /*#__PURE__*/kefir_combines.liftFOF(L.inverse);
var is = /*#__PURE__*/kefir_combines.liftFOF(L.is);
var isDefined = /*#__PURE__*/kefir_combines.liftFOF(L.isDefined);
var isEmpty = /*#__PURE__*/kefir_combines.liftFOF(L.isEmpty);
var iso = /*#__PURE__*/kefir_combines.liftFOF(L.iso);
var join = /*#__PURE__*/kefir_combines.liftFOF(L.join);
var joinAs = /*#__PURE__*/kefir_combines.liftFOF(L.joinAs);
var json = /*#__PURE__*/kefir_combines.liftFOF(L.json);
var keyed = /*#__PURE__*/kefir_combines.liftFOF(L.keyed);
var keys = /*#__PURE__*/kefir_combines.liftFOF(L.keys);
var last = /*#__PURE__*/kefir_combines.liftFOF(L.last);
var lazy = /*#__PURE__*/kefir_combines.liftFOF(L.lazy);
var leafs = /*#__PURE__*/kefir_combines.liftFOF(L.leafs);
var lens = /*#__PURE__*/kefir_combines.liftFOF(L.lens);
var log = /*#__PURE__*/kefir_combines.liftFOF(L.log);
var matches = /*#__PURE__*/kefir_combines.liftFOF(L.matches);
var maximum = /*#__PURE__*/kefir_combines.liftFOF(L.maximum);
var maximumBy = /*#__PURE__*/kefir_combines.liftFOF(L.maximumBy);
var mean = /*#__PURE__*/kefir_combines.liftFOF(L.mean);
var meanAs = /*#__PURE__*/kefir_combines.liftFOF(L.meanAs);
var minimum = /*#__PURE__*/kefir_combines.liftFOF(L.minimum);
var minimumBy = /*#__PURE__*/kefir_combines.liftFOF(L.minimumBy);
var modify = /*#__PURE__*/kefir_combines.liftFOF(L.modify);
var modifyOp = /*#__PURE__*/kefir_combines.liftFOF(L.modifyOp);
var multiply = /*#__PURE__*/kefir_combines.liftFOF(L.multiply);
var negate = /*#__PURE__*/kefir_combines.liftFOF(L.negate);
var none = /*#__PURE__*/kefir_combines.liftFOF(L.none);
var normalize = /*#__PURE__*/kefir_combines.liftFOF(L.normalize);
var optional = /*#__PURE__*/kefir_combines.liftFOF(L.optional);
var or = /*#__PURE__*/kefir_combines.liftFOF(L.or);
var orElse = /*#__PURE__*/kefir_combines.liftFOF(L.orElse);
var pick = /*#__PURE__*/kefir_combines.liftFOF(L.pick);
var pickIn = /*#__PURE__*/kefir_combines.liftFOF(L.pickIn);
var pointer = /*#__PURE__*/kefir_combines.liftFOF(L.pointer);
var prefix = /*#__PURE__*/kefir_combines.liftFOF(L.prefix);
var product = /*#__PURE__*/kefir_combines.liftFOF(L.product);
var productAs = /*#__PURE__*/kefir_combines.liftFOF(L.productAs);
var prop = /*#__PURE__*/kefir_combines.liftFOF(L.prop);
var props = /*#__PURE__*/kefir_combines.liftFOF(L.props);
var propsOf = /*#__PURE__*/kefir_combines.liftFOF(L.propsOf);
var query = /*#__PURE__*/kefir_combines.liftFOF(L.query);
var removable = /*#__PURE__*/kefir_combines.liftFOF(L.removable);
var remove = /*#__PURE__*/kefir_combines.liftFOF(L.remove);
var removeOp = /*#__PURE__*/kefir_combines.liftFOF(L.removeOp);
var replace = /*#__PURE__*/kefir_combines.liftFOF(L.replace);
var replaces = /*#__PURE__*/kefir_combines.liftFOF(L.replaces);
var required = /*#__PURE__*/kefir_combines.liftFOF(L.required);
var reread = /*#__PURE__*/kefir_combines.liftFOF(L.reread);
var reverse = /*#__PURE__*/kefir_combines.liftFOF(L.reverse);
var rewrite = /*#__PURE__*/kefir_combines.liftFOF(L.rewrite);
var satisfying = /*#__PURE__*/kefir_combines.liftFOF(L.satisfying);
var seemsArrayLike = /*#__PURE__*/kefir_combines.liftFOF(L.seemsArrayLike);
var select = /*#__PURE__*/kefir_combines.liftFOF(L.select);
var selectAs = /*#__PURE__*/kefir_combines.liftFOF(L.selectAs);
var seq = /*#__PURE__*/kefir_combines.liftFOF(L.seq);
var set = /*#__PURE__*/kefir_combines.liftFOF(L.set);
var setOp = /*#__PURE__*/kefir_combines.liftFOF(L.setOp);
var setter = /*#__PURE__*/kefir_combines.liftFOF(L.setter);
var singleton = /*#__PURE__*/kefir_combines.liftFOF(L.singleton);
var slice = /*#__PURE__*/kefir_combines.liftFOF(L.slice);
var split = /*#__PURE__*/kefir_combines.liftFOF(L.split);
var subtract = /*#__PURE__*/kefir_combines.liftFOF(L.subtract);
var suffix = /*#__PURE__*/kefir_combines.liftFOF(L.suffix);
var sum = /*#__PURE__*/kefir_combines.liftFOF(L.sum);
var sumAs = /*#__PURE__*/kefir_combines.liftFOF(L.sumAs);
var toFunction = /*#__PURE__*/kefir_combines.liftFOF(L.toFunction);
var transform = /*#__PURE__*/kefir_combines.liftFOF(L.transform);
var traverse = /*#__PURE__*/kefir_combines.liftFOF(L.traverse);
var uncouple = /*#__PURE__*/kefir_combines.liftFOF(L.uncouple);
var unless = /*#__PURE__*/kefir_combines.liftFOF(L.unless);
var uri = /*#__PURE__*/kefir_combines.liftFOF(L.uri);
var uriComponent = /*#__PURE__*/kefir_combines.liftFOF(L.uriComponent);
var valueOr = /*#__PURE__*/kefir_combines.liftFOF(L.valueOr);
var values = /*#__PURE__*/kefir_combines.liftFOF(L.values);
var when = /*#__PURE__*/kefir_combines.liftFOF(L.when);
var zero = /*#__PURE__*/kefir_combines.liftFOF(L.zero);

exports.Constant = Constant;
exports.Identity = Identity;
exports.add = add;
exports.all = all;
exports.and = and;
exports.any = any;
exports.append = append;
exports.array = array;
exports.assign = assign;
exports.assignOp = assignOp;
exports.branch = branch;
exports.branchOr = branchOr;
exports.branches = branches;
exports.chain = chain;
exports.children = children;
exports.choice = choice;
exports.choices = choices;
exports.choose = choose;
exports.collect = collect;
exports.collectAs = collectAs;
exports.complement = complement;
exports.compose = compose;
exports.concat = concat;
exports.concatAs = concatAs;
exports.cond = cond;
exports.condOf = condOf;
exports.count = count;
exports.countIf = countIf;
exports.counts = counts;
exports.countsAs = countsAs;
exports.defaults = defaults;
exports.define = define;
exports.divide = divide;
exports.dropPrefix = dropPrefix;
exports.dropSuffix = dropSuffix;
exports.elems = elems;
exports.entries = entries;
exports.filter = filter;
exports.find = find;
exports.findWith = findWith;
exports.first = first;
exports.flat = flat;
exports.flatten = flatten;
exports.foldTraversalLens = foldTraversalLens;
exports.foldl = foldl;
exports.foldr = foldr;
exports.forEach = forEach;
exports.forEachWith = forEachWith;
exports.get = get;
exports.getInverse = getInverse;
exports.identity = identity;
exports.ifElse = ifElse;
exports.iftes = iftes;
exports.index = index;
exports.indexed = indexed;
exports.inverse = inverse;
exports.is = is;
exports.isDefined = isDefined;
exports.isEmpty = isEmpty;
exports.iso = iso;
exports.join = join;
exports.joinAs = joinAs;
exports.json = json;
exports.keyed = keyed;
exports.keys = keys;
exports.last = last;
exports.lazy = lazy;
exports.leafs = leafs;
exports.lens = lens;
exports.log = log;
exports.matches = matches;
exports.maximum = maximum;
exports.maximumBy = maximumBy;
exports.mean = mean;
exports.meanAs = meanAs;
exports.minimum = minimum;
exports.minimumBy = minimumBy;
exports.modify = modify;
exports.modifyOp = modifyOp;
exports.multiply = multiply;
exports.negate = negate;
exports.none = none;
exports.normalize = normalize;
exports.optional = optional;
exports.or = or;
exports.orElse = orElse;
exports.pick = pick;
exports.pickIn = pickIn;
exports.pointer = pointer;
exports.prefix = prefix;
exports.product = product;
exports.productAs = productAs;
exports.prop = prop;
exports.props = props;
exports.propsOf = propsOf;
exports.query = query;
exports.removable = removable;
exports.remove = remove;
exports.removeOp = removeOp;
exports.replace = replace;
exports.replaces = replaces;
exports.required = required;
exports.reread = reread;
exports.reverse = reverse;
exports.rewrite = rewrite;
exports.satisfying = satisfying;
exports.seemsArrayLike = seemsArrayLike;
exports.select = select;
exports.selectAs = selectAs;
exports.seq = seq;
exports.set = set;
exports.setOp = setOp;
exports.setter = setter;
exports.singleton = singleton;
exports.slice = slice;
exports.split = split;
exports.subtract = subtract;
exports.suffix = suffix;
exports.sum = sum;
exports.sumAs = sumAs;
exports.toFunction = toFunction;
exports.transform = transform;
exports.traverse = traverse;
exports.uncouple = uncouple;
exports.unless = unless;
exports.uri = uri;
exports.uriComponent = uriComponent;
exports.valueOr = valueOr;
exports.values = values;
exports.when = when;
exports.zero = zero;
