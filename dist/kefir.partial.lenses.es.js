import { Constant, Identity, all, and, any, append, array, assign, assignOp, branch, branchOr, branches, chain, children, choice, choices, choose, collect, collectAs, complement, compose, concat, concatAs, cond, condOf, count, countIf, counts, countsAs, defaults, define, elems, entries, filter, find, findWith, first, flat, flatten, foldTraversalLens, foldl, foldr, forEach, forEachWith, get, getInverse, identity, ifElse, iftes, index, indexed, inverse, is, isDefined, isEmpty, iso, join, joinAs, json, keyed, keys, last, lazy, leafs, lens, log, matches, maximum, maximumBy, mean, meanAs, minimum, minimumBy, modify, modifyOp, none, normalize, optional, or, orElse, pick, pickIn, pointer, prefix, product, productAs, prop, props, propsOf, query, removable, remove, removeOp, replace, required, reread, reverse, rewrite, satisfying, seemsArrayLike, select, selectAs, seq, set, setOp, setter, singleton, slice, suffix, sum, sumAs, toFunction, transform, traverse, unless, uri, uriComponent, valueOr, values, when, zero } from 'partial.lenses';
import { liftRec } from 'kefir.combines';

var Constant$1 = /*#__PURE__*/liftRec(Constant);
var Identity$1 = /*#__PURE__*/liftRec(Identity);
var all$1 = /*#__PURE__*/liftRec(all);
var and$1 = /*#__PURE__*/liftRec(and);
var any$1 = /*#__PURE__*/liftRec(any);
var append$1 = /*#__PURE__*/liftRec(append);
var array$1 = /*#__PURE__*/liftRec(array);
var assign$1 = /*#__PURE__*/liftRec(assign);
var assignOp$1 = /*#__PURE__*/liftRec(assignOp);
var branch$1 = /*#__PURE__*/liftRec(branch);
var branchOr$1 = /*#__PURE__*/liftRec(branchOr);
var branches$1 = /*#__PURE__*/liftRec(branches);
var chain$1 = /*#__PURE__*/liftRec(chain);
var children$1 = /*#__PURE__*/liftRec(children);
var choice$1 = /*#__PURE__*/liftRec(choice);
var choices$1 = /*#__PURE__*/liftRec(choices);
var choose$1 = /*#__PURE__*/liftRec(choose);
var collect$1 = /*#__PURE__*/liftRec(collect);
var collectAs$1 = /*#__PURE__*/liftRec(collectAs);
var complement$1 = /*#__PURE__*/liftRec(complement);
var compose$1 = /*#__PURE__*/liftRec(compose);
var concat$1 = /*#__PURE__*/liftRec(concat);
var concatAs$1 = /*#__PURE__*/liftRec(concatAs);
var cond$1 = /*#__PURE__*/liftRec(cond);
var condOf$1 = /*#__PURE__*/liftRec(condOf);
var count$1 = /*#__PURE__*/liftRec(count);
var countIf$1 = /*#__PURE__*/liftRec(countIf);
var counts$1 = /*#__PURE__*/liftRec(counts);
var countsAs$1 = /*#__PURE__*/liftRec(countsAs);
var defaults$1 = /*#__PURE__*/liftRec(defaults);
var define$1 = /*#__PURE__*/liftRec(define);
var elems$1 = /*#__PURE__*/liftRec(elems);
var entries$1 = /*#__PURE__*/liftRec(entries);
var filter$1 = /*#__PURE__*/liftRec(filter);
var find$1 = /*#__PURE__*/liftRec(find);
var findWith$1 = /*#__PURE__*/liftRec(findWith);
var first$1 = /*#__PURE__*/liftRec(first);
var flat$1 = /*#__PURE__*/liftRec(flat);
var flatten$1 = /*#__PURE__*/liftRec(flatten);
var foldTraversalLens$1 = /*#__PURE__*/liftRec(foldTraversalLens);
var foldl$1 = /*#__PURE__*/liftRec(foldl);
var foldr$1 = /*#__PURE__*/liftRec(foldr);
var forEach$1 = /*#__PURE__*/liftRec(forEach);
var forEachWith$1 = /*#__PURE__*/liftRec(forEachWith);
var get$1 = /*#__PURE__*/liftRec(get);
var getInverse$1 = /*#__PURE__*/liftRec(getInverse);
var identity$1 = /*#__PURE__*/liftRec(identity);
var ifElse$1 = /*#__PURE__*/liftRec(ifElse);
var iftes$1 = /*#__PURE__*/liftRec(iftes);
var index$1 = /*#__PURE__*/liftRec(index);
var indexed$1 = /*#__PURE__*/liftRec(indexed);
var inverse$1 = /*#__PURE__*/liftRec(inverse);
var is$1 = /*#__PURE__*/liftRec(is);
var isDefined$1 = /*#__PURE__*/liftRec(isDefined);
var isEmpty$1 = /*#__PURE__*/liftRec(isEmpty);
var iso$1 = /*#__PURE__*/liftRec(iso);
var join$1 = /*#__PURE__*/liftRec(join);
var joinAs$1 = /*#__PURE__*/liftRec(joinAs);
var json$1 = /*#__PURE__*/liftRec(json);
var keyed$1 = /*#__PURE__*/liftRec(keyed);
var keys$1 = /*#__PURE__*/liftRec(keys);
var last$1 = /*#__PURE__*/liftRec(last);
var lazy$1 = /*#__PURE__*/liftRec(lazy);
var leafs$1 = /*#__PURE__*/liftRec(leafs);
var lens$1 = /*#__PURE__*/liftRec(lens);
var log$1 = /*#__PURE__*/liftRec(log);
var matches$1 = /*#__PURE__*/liftRec(matches);
var maximum$1 = /*#__PURE__*/liftRec(maximum);
var maximumBy$1 = /*#__PURE__*/liftRec(maximumBy);
var mean$1 = /*#__PURE__*/liftRec(mean);
var meanAs$1 = /*#__PURE__*/liftRec(meanAs);
var minimum$1 = /*#__PURE__*/liftRec(minimum);
var minimumBy$1 = /*#__PURE__*/liftRec(minimumBy);
var modify$1 = /*#__PURE__*/liftRec(modify);
var modifyOp$1 = /*#__PURE__*/liftRec(modifyOp);
var none$1 = /*#__PURE__*/liftRec(none);
var normalize$1 = /*#__PURE__*/liftRec(normalize);
var optional$1 = /*#__PURE__*/liftRec(optional);
var or$1 = /*#__PURE__*/liftRec(or);
var orElse$1 = /*#__PURE__*/liftRec(orElse);
var pick$1 = /*#__PURE__*/liftRec(pick);
var pickIn$1 = /*#__PURE__*/liftRec(pickIn);
var pointer$1 = /*#__PURE__*/liftRec(pointer);
var prefix$1 = /*#__PURE__*/liftRec(prefix);
var product$1 = /*#__PURE__*/liftRec(product);
var productAs$1 = /*#__PURE__*/liftRec(productAs);
var prop$1 = /*#__PURE__*/liftRec(prop);
var props$1 = /*#__PURE__*/liftRec(props);
var propsOf$1 = /*#__PURE__*/liftRec(propsOf);
var query$1 = /*#__PURE__*/liftRec(query);
var removable$1 = /*#__PURE__*/liftRec(removable);
var remove$1 = /*#__PURE__*/liftRec(remove);
var removeOp$1 = /*#__PURE__*/liftRec(removeOp);
var replace$1 = /*#__PURE__*/liftRec(replace);
var required$1 = /*#__PURE__*/liftRec(required);
var reread$1 = /*#__PURE__*/liftRec(reread);
var reverse$1 = /*#__PURE__*/liftRec(reverse);
var rewrite$1 = /*#__PURE__*/liftRec(rewrite);
var satisfying$1 = /*#__PURE__*/liftRec(satisfying);
var seemsArrayLike$1 = /*#__PURE__*/liftRec(seemsArrayLike);
var select$1 = /*#__PURE__*/liftRec(select);
var selectAs$1 = /*#__PURE__*/liftRec(selectAs);
var seq$1 = /*#__PURE__*/liftRec(seq);
var set$1 = /*#__PURE__*/liftRec(set);
var setOp$1 = /*#__PURE__*/liftRec(setOp);
var setter$1 = /*#__PURE__*/liftRec(setter);
var singleton$1 = /*#__PURE__*/liftRec(singleton);
var slice$1 = /*#__PURE__*/liftRec(slice);
var suffix$1 = /*#__PURE__*/liftRec(suffix);
var sum$1 = /*#__PURE__*/liftRec(sum);
var sumAs$1 = /*#__PURE__*/liftRec(sumAs);
var toFunction$1 = /*#__PURE__*/liftRec(toFunction);
var transform$1 = /*#__PURE__*/liftRec(transform);
var traverse$1 = /*#__PURE__*/liftRec(traverse);
var unless$1 = /*#__PURE__*/liftRec(unless);
var uri$1 = /*#__PURE__*/liftRec(uri);
var uriComponent$1 = /*#__PURE__*/liftRec(uriComponent);
var valueOr$1 = /*#__PURE__*/liftRec(valueOr);
var values$1 = /*#__PURE__*/liftRec(values);
var when$1 = /*#__PURE__*/liftRec(when);
var zero$1 = /*#__PURE__*/liftRec(zero);

export { Constant$1 as Constant, Identity$1 as Identity, all$1 as all, and$1 as and, any$1 as any, append$1 as append, array$1 as array, assign$1 as assign, assignOp$1 as assignOp, branch$1 as branch, branchOr$1 as branchOr, branches$1 as branches, chain$1 as chain, children$1 as children, choice$1 as choice, choices$1 as choices, choose$1 as choose, collect$1 as collect, collectAs$1 as collectAs, complement$1 as complement, compose$1 as compose, concat$1 as concat, concatAs$1 as concatAs, cond$1 as cond, condOf$1 as condOf, count$1 as count, countIf$1 as countIf, counts$1 as counts, countsAs$1 as countsAs, defaults$1 as defaults, define$1 as define, elems$1 as elems, entries$1 as entries, filter$1 as filter, find$1 as find, findWith$1 as findWith, first$1 as first, flat$1 as flat, flatten$1 as flatten, foldTraversalLens$1 as foldTraversalLens, foldl$1 as foldl, foldr$1 as foldr, forEach$1 as forEach, forEachWith$1 as forEachWith, get$1 as get, getInverse$1 as getInverse, identity$1 as identity, ifElse$1 as ifElse, iftes$1 as iftes, index$1 as index, indexed$1 as indexed, inverse$1 as inverse, is$1 as is, isDefined$1 as isDefined, isEmpty$1 as isEmpty, iso$1 as iso, join$1 as join, joinAs$1 as joinAs, json$1 as json, keyed$1 as keyed, keys$1 as keys, last$1 as last, lazy$1 as lazy, leafs$1 as leafs, lens$1 as lens, log$1 as log, matches$1 as matches, maximum$1 as maximum, maximumBy$1 as maximumBy, mean$1 as mean, meanAs$1 as meanAs, minimum$1 as minimum, minimumBy$1 as minimumBy, modify$1 as modify, modifyOp$1 as modifyOp, none$1 as none, normalize$1 as normalize, optional$1 as optional, or$1 as or, orElse$1 as orElse, pick$1 as pick, pickIn$1 as pickIn, pointer$1 as pointer, prefix$1 as prefix, product$1 as product, productAs$1 as productAs, prop$1 as prop, props$1 as props, propsOf$1 as propsOf, query$1 as query, removable$1 as removable, remove$1 as remove, removeOp$1 as removeOp, replace$1 as replace, required$1 as required, reread$1 as reread, reverse$1 as reverse, rewrite$1 as rewrite, satisfying$1 as satisfying, seemsArrayLike$1 as seemsArrayLike, select$1 as select, selectAs$1 as selectAs, seq$1 as seq, set$1 as set, setOp$1 as setOp, setter$1 as setter, singleton$1 as singleton, slice$1 as slice, suffix$1 as suffix, sum$1 as sum, sumAs$1 as sumAs, toFunction$1 as toFunction, transform$1 as transform, traverse$1 as traverse, unless$1 as unless, uri$1 as uri, uriComponent$1 as uriComponent, valueOr$1 as valueOr, values$1 as values, when$1 as when, zero$1 as zero };
